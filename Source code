import pygame
import sys
import random

# Initialize pygame
pygame.init()

# Screen dimensions
SCREEN_WIDTH = 400
SCREEN_HEIGHT = 600

# Colors
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)

# Default game settings
DIFFICULTIES = {
    "easy": {"gravity": 0.4, "flap_strength": -8, "pipe_speed": -3, "pipe_gap": 180, "pipe_frequency": 2000},
    "normal": {"gravity": 0.5, "flap_strength": -10, "pipe_speed": -4, "pipe_gap": 150, "pipe_frequency": 1500},
    "hard": {"gravity": 0.6, "flap_strength": -12, "pipe_speed": -5, "pipe_gap": 120, "pipe_frequency": 1200}
}

game_settings = DIFFICULTIES["normal"]

# Initialize screen
screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))
pygame.display.set_caption("Flappy Bird")

# Load assets with error handling
def load_image(filename, size=None):
    try:
        image = pygame.image.load(filename).convert_alpha()
        if size:
            image = pygame.transform.scale(image, size)
        return image
    except pygame.error as e:
        print(f"Error loading image {filename}: {e}")
        sys.exit()

def load_sound(filename):
    try:
        return pygame.mixer.Sound(filename)
    except pygame.error as e:
        print(f"Error loading sound {filename}: {e}")
        sys.exit()

# Replace with placeholders if assets are missing
try:
    background_image = load_image("background.png", (SCREEN_WIDTH, SCREEN_HEIGHT))
    bird_frames = [load_image(f"bird_frame_{i}.png", (34, 24)) for i in range(1, 6)]
    pipe_image = load_image("pipe.png", (50, 600))
    flap_sound = load_sound("flap.wav")
    collision_sound = load_sound("collision.wav")
except SystemExit:
    background_image = pygame.Surface((SCREEN_WIDTH, SCREEN_HEIGHT))
    background_image.fill(WHITE)
    bird_frames = [pygame.Surface((34, 24)) for _ in range(5)]
    for frame in bird_frames:
        frame.fill(BLACK)
    pipe_image = pygame.Surface((50, 600))
    pipe_image.fill(BLACK)
    flap_sound = pygame.mixer.Sound(None)
    collision_sound = pygame.mixer.Sound(None)

clock = pygame.time.Clock()
font = pygame.font.Font(None, 36)

# Button class with rounded corners and shadow effect
class Button:
    def __init__(self, x, y, width, height, text, color, text_color, action=None):
        self.rect = pygame.Rect(x, y, width, height)
        self.text = text
        self.color = color
        self.text_color = text_color
        self.action = action
        self.font = pygame.font.Font(None, 36)

    def draw(self):
        # Draw button with rounded corners and shadow effect
        shadow_rect = pygame.Rect(self.rect.x + 5, self.rect.y + 5, self.rect.width, self.rect.height)
        pygame.draw.rect(screen, (50, 50, 50), shadow_rect, border_radius=10)
        pygame.draw.rect(screen, self.color, self.rect, border_radius=10)

        text_surface = self.font.render(self.text, True, self.text_color)
        text_rect = text_surface.get_rect(center=self.rect.center)
        screen.blit(text_surface, text_rect)

    def is_clicked(self, pos):
        return self.rect.collidepoint(pos)

# Dropdown class with modern UI and hover effect
class Dropdown:
    def __init__(self, x, y, width, height, options, initial_option, font_color, bg_color, hover_color, action=None):
        self.rect = pygame.Rect(x, y, width, height)
        self.options = options
        self.selected_option = initial_option
        self.font_color = font_color
        self.bg_color = bg_color
        self.hover_color = hover_color
        self.expanded = False
        self.action = action
        self.font = pygame.font.Font(None, 36)

    def draw(self):
        # Draw dropdown with rounded corners and modern look
        pygame.draw.rect(screen, self.bg_color, self.rect, border_radius=10)
        selected_text = self.font.render(self.selected_option, True, self.font_color)
        screen.blit(selected_text, (self.rect.x + 10, self.rect.y + 10))

        if self.expanded:
            for i, option in enumerate(self.options):
                option_rect = pygame.Rect(
                    self.rect.x, self.rect.y + (i + 1) * self.rect.height, self.rect.width, self.rect.height
                )
                pygame.draw.rect(screen, self.hover_color if option == self.selected_option else self.bg_color, option_rect, border_radius=10)
                option_text = self.font.render(option, True, self.font_color)
                screen.blit(option_text, (option_rect.x + 10, option_rect.y + 10))

    def handle_event(self, event):
        if event.type == pygame.MOUSEBUTTONDOWN:
            if self.rect.collidepoint(event.pos):
                self.expanded = not self.expanded
            elif self.expanded:
                for i, option in enumerate(self.options):
                    option_rect = pygame.Rect(
                        self.rect.x, self.rect.y + (i + 1) * self.rect.height, self.rect.width, self.rect.height
                    )
                    if option_rect.collidepoint(event.pos):
                        self.selected_option = option
                        if self.action:
                            self.action(option)
                        self.expanded = False
                        break
                else:
                    self.expanded = False

# Bird class
class Bird:
    def __init__(self):
        self.x = 50
        self.y = SCREEN_HEIGHT // 2
        self.width = 34
        self.height = 24
        self.velocity = 0
        self.frame_index = 0
        self.animation_timer = 0

    def flap(self):
        self.velocity = game_settings["flap_strength"]
        flap_sound.play()

    def move(self):
        self.velocity = min(self.velocity + game_settings["gravity"], 15)
        self.y += self.velocity

    def draw(self):
        self.animation_timer += clock.get_time()
        if self.animation_timer >= 100:
            self.frame_index = (self.frame_index + 1) % len(bird_frames)
            self.animation_timer = 0
        screen.blit(bird_frames[self.frame_index], (self.x, self.y))

# Pipe class
class Pipe:
    def __init__(self, x):
        self.x = x
        self.top_height = random.randint(50, SCREEN_HEIGHT - game_settings["pipe_gap"] - 50)
        self.bottom_height = SCREEN_HEIGHT - self.top_height - game_settings["pipe_gap"]
        self.passed = False

    def move(self):
        self.x += game_settings["pipe_speed"]

    def draw(self):
        screen.blit(pipe_image, (self.x, 0), (0, 0, 50, self.top_height))
        screen.blit(pipe_image, (self.x, SCREEN_HEIGHT - self.bottom_height), (0, 0, 50, self.bottom_height))

    def collide(self, bird):
        bird_rect = pygame.Rect(bird.x, bird.y, bird.width, bird.height)
        top_pipe_rect = pygame.Rect(self.x, 0, 50, self.top_height)
        bottom_pipe_rect = pygame.Rect(self.x, SCREEN_HEIGHT - self.bottom_height, 50, self.bottom_height)
        return bird_rect.colliderect(top_pipe_rect) or bird_rect.colliderect(bottom_pipe_rect)

# Scoring system
def load_high_score():
    try:
        with open("high_score.txt", "r") as file:
            return int(file.read())
    except (FileNotFoundError, ValueError):
        return 0

def save_high_score(new_high_score):
    with open("high_score.txt", "w") as file:
        file.write(str(new_high_score))

high_score = load_high_score()

# Main menu
def main_menu():
    global game_settings

    start_button = Button(SCREEN_WIDTH // 2 - 100, SCREEN_HEIGHT // 2 - 40, 200, 50, "Start Game", (60, 60, 255), WHITE, main_game)
    quit_button = Button(SCREEN_WIDTH // 2 - 100, SCREEN_HEIGHT // 2 + 40, 200, 50, "Quit", (255, 60, 60), WHITE, pygame.quit)

    difficulty_dropdown = Dropdown(
        SCREEN_WIDTH - 210, 20, 200, 50,  # Position at top-right
        ["Easy", "Normal", "Hard"], "Normal", WHITE, (0, 128, 255), (200, 200, 200),
        lambda option: set_difficulty(option.lower())
    )

    running = True
    while running:
        screen.blit(background_image, (0, 0))

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()
            difficulty_dropdown.handle_event(event)
            if event.type == pygame.MOUSEBUTTONDOWN:
                if start_button.is_clicked(event.pos):
                    start_button.action()
                if quit_button.is_clicked(event.pos):
                    quit_button.action()

        difficulty_dropdown.draw()
        start_button.draw()
        quit_button.draw()

        pygame.display.flip()
        clock.tick(30)

# Set difficulty
def set_difficulty(level):
    global game_settings
    game_settings = DIFFICULTIES[level]

# Main game loop
def main_game():
    global high_score

    bird = Bird()
    pipes = []
    score = 0
    running = True
    pygame.time.set_timer(pygame.USEREVENT, game_settings["pipe_frequency"])

    while running:
        screen.blit(background_image, (0, 0))

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()
            if event.type == pygame.KEYDOWN and event.key == pygame.K_SPACE:
                bird.flap()
            if event.type == pygame.USEREVENT:
                pipes.append(Pipe(SCREEN_WIDTH))

        bird.move()
        bird.draw()

        for pipe in pipes[:]:
            pipe.move()
            pipe.draw()
            if pipe.x + 50 < 0:
                pipes.remove(pipe)
            if not pipe.passed and pipe.x < bird.x:
                pipe.passed = True
                score += 1

            if pipe.collide(bird):
                collision_sound.play()
                running = False

        if bird.y > SCREEN_HEIGHT or bird.y < 0:
            collision_sound.play()
            running = False

        score_text = font.render(f"Score: {score}", True, BLACK)
        screen.blit(score_text, (10, 10))

        high_score = max(high_score, score)
        high_score_text = font.render(f"High Score: {high_score}", True, BLACK)
        screen.blit(high_score_text, (10, 40))

        pygame.display.flip()
        clock.tick(30)

    save_high_score(high_score)
    main_menu()

if __name__ == "__main__":
    main_menu()
